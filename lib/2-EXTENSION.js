// Generated by CoffeeScript 1.10.0
(function() {
  var $new, BASE, BNP, CHR, TRM, alert, badge, debug, echo, help, info, log, rainbow, rpr, warn, whisper, ƒ;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'IDLX/2-EXTENSION';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  echo = TRM.echo.bind(TRM);

  rainbow = TRM.rainbow.bind(TRM);

  BNP = require('coffeenode-bitsnpieces');

  ƒ = require('flowmatic');

  $new = ƒ["new"];

  BASE = require('./1-BASE');

  CHR = require('coffeenode-chr');

  this.options = {
    'operator-2': /[⿰⿱⿴⿵⿶⿷⿸⿹⿺⿻◰]/,
    'operator-1': /[≈↻↔↕]/
  };

  this.constructor = function(G, $) {
    var simple_formula_matcher;
    simple_formula_matcher = new RegExp('^' + $['operator-2'].source + '(?:' + BASE.$['cjk-chr'].source + ')' + '(?:' + BASE.$['cjk-chr'].source + ')' + '$');
    G.formula = function() {
      return ƒ.or((function() {
        return G.formula_bracketed;
      }), (function() {
        return G.formula_plain;
      }), (function() {
        return BASE.missing;
      }));
    };
    G.formula_plain = function() {
      return ƒ.or((function() {
        return G.formula_binary;
      }), (function() {
        return G.formula_unary;
      }));
    };
    G.formula_unary = function() {
      return ƒ.seq((function() {
        return G.operator_1;
      }), (function() {
        return G.term;
      }));
    };
    G.formula_binary = function() {
      return ƒ.seq((function() {
        return G.operator_2;
      }), (function() {
        return G.term;
      }), (function() {
        return G.term;
      }));
    };
    G.term = function() {
      return ƒ.or((function() {
        return G.term_precise;
      }), (function() {
        return G.term_similar;
      }));
    };
    G.terms = function() {
      return ƒ.repeat((function() {
        return G.term;
      }), 1);
    };
    G.term_precise = function() {
      return ƒ.or((function() {
        return G.formula;
      }), (function() {
        return G.component;
      }));
    };
    G.term_similar = function() {
      return ƒ.seq((function() {
        return ƒ.string(BASE.$['similarity-mark']);
      }), (function() {
        return G.term_precise;
      }));
    };
    G.component = function() {
      return ƒ.or((function() {
        return BASE.$cjk_chr;
      }), (function() {
        return BASE.$ncr;
      }), (function() {
        return BASE.$curvy_line;
      }));
    };
    G._expression = function() {
      return ƒ.or((function() {
        return BASE.$finish;
      }), (function() {
        return G.formula;
      }));
    };
    G.expression = ƒ.or(function() {
      return ƒ.regex(/.*/);
    }).onMatch(function(match, state) {
      var R, source;
      source = match[0];
      if (source === '') {
        throw new Error("IDL expression cannot be empty");
      }
      if (source === (R = BASE.$['finish-formula'])) {
        return R;
      }
      if (source === (R = BASE.$['missing-formula'])) {
        return [R];
      }
      if (simple_formula_matcher.test(source)) {
        return CHR.chrs_from_text(source);
      }
      return G._expression.run(source);
    });
    G.operator_1 = ƒ.or(function() {
      return ƒ.regex($['operator-1']);
    }).onMatch(function(match, state) {
      return match[0];
    });
    G.operator_2 = ƒ.or(function() {
      return ƒ.regex($['operator-2']);
    }).onMatch(function(match, state) {
      return match[0];
    }).describe('EXTENSION/operator-2');
    G.formula_bracketed = ƒ.seq(ƒ.string('('), (function() {
      return G.operator_2;
    }), (function() {
      return G.terms;
    }), ƒ.string(')')).onMatch(function(match, state) {
      return match.slice(1, match.length - 1);
    });
    G.tests['unary formula'] = function(test) {
      var i, len, matcher, probe, probes_and_matchers, ref, result, results;
      probes_and_matchers = [['↔正', ['↔', '正']], ['↻正', ['↻', '正']], ['↔≈匕', ['↔', ['≈', '匕']]]];
      results = [];
      for (i = 0, len = probes_and_matchers.length; i < len; i++) {
        ref = probes_and_matchers[i], probe = ref[0], matcher = ref[1];
        result = ƒ["new"]._delete_grammar_references(G.formula_unary.run(probe));
        results.push(test.eq(result, matcher));
      }
      return results;
    };
    G.tests['binary formula'] = function(test) {
      var i, len, matcher, probe, probes_and_matchers, ref, result, results;
      probes_and_matchers = [['⿱丶乂', ['⿱', '丶', '乂']], ['⿺走⿹◰口戈日', ['⿺', '走', ['⿹', ['◰', '口', '戈'], '日']]]];
      results = [];
      for (i = 0, len = probes_and_matchers.length; i < len; i++) {
        ref = probes_and_matchers[i], probe = ref[0], matcher = ref[1];
        result = ƒ["new"]._delete_grammar_references(G.formula_binary.run(probe));
        results.push(test.eq(result, matcher));
      }
      return results;
    };
    G.tests['plain formula'] = function(test) {
      var i, len, matcher, probe, probes_and_matchers, ref, result, results;
      probes_and_matchers = [['↻正', ['↻', '正']], ['↔≈匕', ['↔', ['≈', '匕']]], ['↔正', ['↔', '正']], ['⿱丶乂', ['⿱', '丶', '乂']], ['⿺走⿹◰口戈日', ['⿺', '走', ['⿹', ['◰', '口', '戈'], '日']]]];
      results = [];
      for (i = 0, len = probes_and_matchers.length; i < len; i++) {
        ref = probes_and_matchers[i], probe = ref[0], matcher = ref[1];
        result = ƒ["new"]._delete_grammar_references(G.formula_plain.run(probe));
        results.push(test.eq(result, matcher));
      }
      return results;
    };
    G.tests['bracketed formula'] = function(test) {
      var i, len, matcher, probe, probes_and_matchers, ref, result, results;
      probes_and_matchers = [['(⿱北㓁允)', ['⿱', ['北', '㓁', '允']]]];
      results = [];
      for (i = 0, len = probes_and_matchers.length; i < len; i++) {
        ref = probes_and_matchers[i], probe = ref[0], matcher = ref[1];
        result = ƒ["new"]._delete_grammar_references(G.formula_bracketed.run(probe));
        results.push(test.eq(result, matcher));
      }
      return results;
    };
    G.tests['formula'] = function(test) {
      var i, len, matcher, probe, probes_and_matchers, ref, result, results;
      probes_and_matchers = [['↻正', ['↻', '正']], ['↔≈匕', ['↔', ['≈', '匕']]], ['↔正', ['↔', '正']], ['⿱丶乂', ['⿱', '丶', '乂']], ['⿺走⿹◰口戈日', ['⿺', '走', ['⿹', ['◰', '口', '戈'], '日']]], ['(⿱北㓁允)', ['⿱', ['北', '㓁', '允']]]];
      results = [];
      for (i = 0, len = probes_and_matchers.length; i < len; i++) {
        ref = probes_and_matchers[i], probe = ref[0], matcher = ref[1];
        result = ƒ["new"]._delete_grammar_references(G.formula.run(probe));
        results.push(test.eq(result, matcher));
      }
      return results;
    };
    G.tests['expression'] = function(test) {
      var i, len, matcher, probe, probes_and_matchers, ref, result, results;
      probes_and_matchers = [['↻正', ['↻', '正']], ['↔≈匕', ['↔', ['≈', '匕']]], ['↔正', ['↔', '正']], ['⿱丶乂', ['⿱', '丶', '乂']], ['⿺走⿹◰口戈日', ['⿺', '走', ['⿹', ['◰', '口', '戈'], '日']]], ['(⿱北㓁允)', ['⿱', ['北', '㓁', '允']]], ['●', '●'], ['≈匚', ['≈', '匚']], ['≈&jzr#xe174;', ['≈', '&jzr#xe174;']], ['≈非', ['≈', '非']], ['⿱§&jzr#xe199;', ['⿱', '§', '&jzr#xe199;']], ['〓', ['〓']], ['⿺走⿹◰口〓日', ['⿺', '走', ['⿹', ['◰', '口', '〓'], '日']]]];
      results = [];
      for (i = 0, len = probes_and_matchers.length; i < len; i++) {
        ref = probes_and_matchers[i], probe = ref[0], matcher = ref[1];
        result = ƒ["new"]._delete_grammar_references(G.expression.run(probe));
        results.push(test.eq(result, matcher));
      }
      return results;
    };
    return G.tests['failing expressions'] = function(test) {
      var i, len, probe, probes, results;
      probes = ['▽', '⿱爫⿸&jzr#xe217;', '⿰犭⿱臼u-cjk/7361', '⿱&jzr#xe186;田一', '⿱屮⿰艸', '⿱廿≈㒳巾', '⿰&jzr#xe219;⿱(⿰丿壬&cdp#x87c0;)', '⿸厂⿱(䀠犬)金', '⿴口⿰⿱&jzr#xe21a;𠃌𠃊&jzr#xe1d3;', '⿱&jzr#xe238;口小', '⿻弋&jzr#e103;', '⿻&jzr#xe120;&jzr#e103;', '⿰⿱&jzr#xe238;一木欠', '⿱䀠目开', '⿷匚丨&jzr#xe1f5;', '⿺⿸𠂋⿱〢一&jzr#xe150;⿱虫土', '⿰𣥚𣥚𣥚', '⿳辵𡕝', '⿰阝⿱一&jzr#xe109;冋', '⿰⿱冫冫&jzr#xe110;⿱&jzr#xe150;&jzr#xe150;', '⿰香业≈𠕒', '⿰⿱&jzr#xe139;二', '⿱亠⿻幺&jzr#xe119;十', '(⿰阝(⿸𠂆虍人)(⿸𠂆虍人))虒', '⿰魚(⿱亠口⺴)亮'];
      results = [];
      for (i = 0, len = probes.length; i < len; i++) {
        probe = probes[i];
        whisper(probe);
        results.push(test.throws(function() {
          return G.expression.run(probe);
        }));
      }
      return results;
    };
  };

  ƒ["new"].consolidate(this);

}).call(this);
