// Generated by CoffeeScript 1.7.1
(function() {
  var $new, CND, alert, badge, debug, echo, help, info, log, rainbow, rpr, warn, whisper, ƒ;

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'IDLX/1-BASE';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  echo = CND.echo.bind(CND);

  rainbow = CND.rainbow.bind(CND);

  ƒ = require('flowmatic');

  $new = ƒ["new"];

  this.cjk_chr_matcher = /[\u2e80-\u2eff\u2f00-\u2fdf\u3005-\u3007\u3013\u3021-\u3029\u3038-\u303d\u31c0-\u31ef\u3400-\u4dbf\u4e00-\u9fff\uf900-\ufaff]|(?:[\ud840-\ud868][\udc00-\udfff]|\ud869[\udc00-\uded6])|(?:[\ud86a-\ud86c][\udc00-\udfff]|\ud869[\udf00-\udfff]|\ud86d[\udc00-\udf3f])|(?:\ud86d[\udf40-\udfff]|\ud86e[\udc00-\udc1d])|(?:\ud87e[\udc00-\ude1d])/g;

  this.options = {
    'finish-formula': '●',
    'missing-formula': '〓',
    'mapped-cp': '▽',
    'ncr': /&[a-z0-9]*\#(?:x[a-f0-9]+|[0-9]+);/,
    'operator-2': /[⿰⿱⿴⿵⿶⿷⿸⿹⿺⿻]/,
    'operator-3': /[⿲⿳]/,
    'similarity-mark': '≈',
    'curvy-line': '§',
    'cjk-chr': this.cjk_chr_matcher
  };

  this.cjkg_chr_matcher = RegExp("" + this.options['missing-formula'] + "|" + this.options['curvy-line'] + "|(?:" + this.options['ncr'].source + ")|(?:" + this.cjk_chr_matcher.source + ")", "g");

  this.constructor = function(G, $) {
    G.$curvy_line = function() {
      return ƒ.or(ƒ.string($['curvy-line']));
    };
    G.$finish = function() {
      return ƒ.or(ƒ.string($['finish-formula']));
    };
    G.component = function() {
      return ƒ.or((function() {
        return G.$cjk_chr;
      }), (function() {
        return G.$ncr;
      }), (function() {
        return G.$curvy_line;
      }));
    };
    G.expression = function() {
      return ƒ.or((function() {
        return G.$finish;
      }), (function() {
        return G.formula;
      }));
    };
    G.formula = function() {
      return ƒ.or((function() {
        return G.formula_3;
      }), (function() {
        return G.formula_2;
      }), (function() {
        return G.missing;
      }));
    };
    G.formula_2 = function() {
      return ƒ.seq((function() {
        return G.$operator_2;
      }), (function() {
        return G.term;
      }), (function() {
        return G.term;
      }));
    };
    G.formula_3 = function() {
      return ƒ.seq((function() {
        return G.$operator_3;
      }), (function() {
        return G.term;
      }), (function() {
        return G.term;
      }), (function() {
        return G.term;
      }));
    };
    G.missing = function() {
      return ƒ.or(ƒ.string($['missing-formula']));
    };
    G.term = function() {
      return ƒ.or((function() {
        return G.term_precise;
      }), (function() {
        return G.term_similar;
      }));
    };
    G.term_precise = function() {
      return ƒ.or((function() {
        return G.formula;
      }), (function() {
        return G.component;
      }));
    };
    G.term_similar = function() {
      return ƒ.seq(ƒ.string($['similarity-mark']), (function() {
        return G.term_precise;
      }));
    };
    G.$ncr = ƒ.or(function() {
      return ƒ.regex($['ncr']);
    }).onMatch(function(match, state) {
      return match[0];
    });
    G.$cjk_chr = ƒ.or(function() {
      return ƒ.regex($['cjk-chr']);
    }).onMatch(function(match, state) {
      return match[0];
    });
    G.$operator_2 = ƒ.or(function() {
      return ƒ.regex($['operator-2']);
    }).onMatch(function(match, state) {
      return match[0];
    });
    G.$operator_3 = ƒ.or(function() {
      return ƒ.regex($['operator-3']);
    }).onMatch(function(match, state) {
      return match[0];
    }).describe('BASE/operator-3');
    G.tests['operator 2'] = function(test) {
      var matcher, probe, probes_and_matchers, result, _i, _len, _ref, _results;
      probes_and_matchers = [['⿰', '⿰'], ['⿴', '⿴']];
      _results = [];
      for (_i = 0, _len = probes_and_matchers.length; _i < _len; _i++) {
        _ref = probes_and_matchers[_i], probe = _ref[0], matcher = _ref[1];
        result = ƒ["new"]._delete_grammar_references(G.$operator_2.run(probe));
        _results.push(test.eq(result, matcher));
      }
      return _results;
    };
    G.tests['operator 3'] = function(test) {
      var matcher, probe, probes_and_matchers, result, _i, _len, _ref, _results;
      probes_and_matchers = [['⿳', '⿳']];
      _results = [];
      for (_i = 0, _len = probes_and_matchers.length; _i < _len; _i++) {
        _ref = probes_and_matchers[_i], probe = _ref[0], matcher = _ref[1];
        result = ƒ["new"]._delete_grammar_references(G.$operator_3.run(probe));
        _results.push(test.eq(result, matcher));
      }
      return _results;
    };
    G.tests['CJK character'] = function(test) {
      var matcher, probe, probes_and_matchers, result, _i, _len, _ref, _results;
      probes_and_matchers = [['㐀', '㐀'], ['𠀎', '𠀎'], ['𪜀', '𪜀'], ['〇', '〇']];
      _results = [];
      for (_i = 0, _len = probes_and_matchers.length; _i < _len; _i++) {
        _ref = probes_and_matchers[_i], probe = _ref[0], matcher = _ref[1];
        result = ƒ["new"]._delete_grammar_references(G.$cjk_chr.run(probe));
        _results.push(test.eq(result, matcher));
      }
      return _results;
    };
    G.tests['similarity term'] = function(test) {
      var matcher, probe, probes_and_matchers, result, _i, _len, _ref, _results;
      probes_and_matchers = [['≈㐀', ['≈', '㐀']], ['≈𠀎', ['≈', '𠀎']], ['≈𪜀', ['≈', '𪜀']], ['≈〇', ['≈', '〇']]];
      _results = [];
      for (_i = 0, _len = probes_and_matchers.length; _i < _len; _i++) {
        _ref = probes_and_matchers[_i], probe = _ref[0], matcher = _ref[1];
        result = ƒ["new"]._delete_grammar_references(G.term_similar.run(probe));
        _results.push(test.eq(result, matcher));
      }
      return _results;
    };
    G.tests['precise term'] = function(test) {
      var matcher, probe, probes_and_matchers, result, _i, _len, _ref, _results;
      probes_and_matchers = [['⿻串一', ['⿻', '串', '一']]];
      _results = [];
      for (_i = 0, _len = probes_and_matchers.length; _i < _len; _i++) {
        _ref = probes_and_matchers[_i], probe = _ref[0], matcher = _ref[1];
        result = ƒ["new"]._delete_grammar_references(G.term_precise.run(probe));
        _results.push(test.eq(result, matcher));
      }
      return _results;
    };
    G.tests['formula 2'] = function(test) {
      var matcher, probe, probes_and_matchers, result, _i, _len, _ref, _results;
      probes_and_matchers = [['⿻串一', ['⿻', '串', '一']], ['⿻串⿰立风', ['⿻', '串', ['⿰', '立', '风']]], ['⿻串⿰立&jzr#x1234;', ['⿻', '串', ['⿰', '立', '&jzr#x1234;']]], ['⿻串⿳立风𠃓', ['⿻', '串', ['⿳', '立', '风', '𠃓']]]];
      _results = [];
      for (_i = 0, _len = probes_and_matchers.length; _i < _len; _i++) {
        _ref = probes_and_matchers[_i], probe = _ref[0], matcher = _ref[1];
        result = ƒ["new"]._delete_grammar_references(G.formula_2.run(probe));
        _results.push(test.eq(result, matcher));
      }
      return _results;
    };
    G.tests['formula 3'] = function(test) {
      var matcher, probe, probes_and_matchers, result, _i, _len, _ref, _results;
      probes_and_matchers = [['⿳立风𠃓', ['⿳', '立', '风', '𠃓']]];
      _results = [];
      for (_i = 0, _len = probes_and_matchers.length; _i < _len; _i++) {
        _ref = probes_and_matchers[_i], probe = _ref[0], matcher = _ref[1];
        result = ƒ["new"]._delete_grammar_references(G.formula_3.run(probe));
        _results.push(test.eq(result, matcher));
      }
      return _results;
    };
    G.tests['formula'] = function(test) {
      var matcher, probe, probes_and_matchers, result, _i, _len, _ref, _results;
      probes_and_matchers = [['⿻串一', ['⿻', '串', '一']], ['⿻串⿰立风', ['⿻', '串', ['⿰', '立', '风']]], ['⿻串⿳立风𠃓', ['⿻', '串', ['⿳', '立', '风', '𠃓']]]];
      _results = [];
      for (_i = 0, _len = probes_and_matchers.length; _i < _len; _i++) {
        _ref = probes_and_matchers[_i], probe = _ref[0], matcher = _ref[1];
        result = ƒ["new"]._delete_grammar_references(G.formula.run(probe));
        _results.push(test.eq(result, matcher));
      }
      return _results;
    };
    return G.tests['expression'] = function(test) {
      var matcher, probe, probes_and_matchers, result, _i, _len, _ref, _results;
      probes_and_matchers = [['⿻串一', ['⿻', '串', '一']], ['⿻串⿰立风', ['⿻', '串', ['⿰', '立', '风']]], ['⿻串⿳立风𠃓', ['⿻', '串', ['⿳', '立', '风', '𠃓']]], ['●', '●']];
      _results = [];
      for (_i = 0, _len = probes_and_matchers.length; _i < _len; _i++) {
        _ref = probes_and_matchers[_i], probe = _ref[0], matcher = _ref[1];
        result = ƒ["new"]._delete_grammar_references(G.expression.run(probe));
        _results.push(test.eq(result, matcher));
      }
      return _results;
    };
  };

  ƒ["new"].consolidate(this);

}).call(this);
